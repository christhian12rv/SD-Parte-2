# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import DatabaseService_pb2 as DatabaseService__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in DatabaseService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTable = channel.unary_unary(
                '/database.DatabaseService/CreateTable',
                request_serializer=DatabaseService__pb2.TableMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.Status.FromString,
                _registered_method=True)
        self.DeleteTable = channel.unary_unary(
                '/database.DatabaseService/DeleteTable',
                request_serializer=DatabaseService__pb2.TableMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.Status.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/database.DatabaseService/Create',
                request_serializer=DatabaseService__pb2.CreateUpdateMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.Status.FromString,
                _registered_method=True)
        self.Request = channel.unary_unary(
                '/database.DatabaseService/Request',
                request_serializer=DatabaseService__pb2.RequestMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.RequestReturn.FromString,
                _registered_method=True)
        self.RequestAll = channel.unary_stream(
                '/database.DatabaseService/RequestAll',
                request_serializer=DatabaseService__pb2.TableMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.RequestReturn.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/database.DatabaseService/Update',
                request_serializer=DatabaseService__pb2.CreateUpdateMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.Status.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/database.DatabaseService/Delete',
                request_serializer=DatabaseService__pb2.RequestMessage.SerializeToString,
                response_deserializer=DatabaseService__pb2.Status.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTable,
                    request_deserializer=DatabaseService__pb2.TableMessage.FromString,
                    response_serializer=DatabaseService__pb2.Status.SerializeToString,
            ),
            'DeleteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTable,
                    request_deserializer=DatabaseService__pb2.TableMessage.FromString,
                    response_serializer=DatabaseService__pb2.Status.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=DatabaseService__pb2.CreateUpdateMessage.FromString,
                    response_serializer=DatabaseService__pb2.Status.SerializeToString,
            ),
            'Request': grpc.unary_unary_rpc_method_handler(
                    servicer.Request,
                    request_deserializer=DatabaseService__pb2.RequestMessage.FromString,
                    response_serializer=DatabaseService__pb2.RequestReturn.SerializeToString,
            ),
            'RequestAll': grpc.unary_stream_rpc_method_handler(
                    servicer.RequestAll,
                    request_deserializer=DatabaseService__pb2.TableMessage.FromString,
                    response_serializer=DatabaseService__pb2.RequestReturn.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=DatabaseService__pb2.CreateUpdateMessage.FromString,
                    response_serializer=DatabaseService__pb2.Status.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=DatabaseService__pb2.RequestMessage.FromString,
                    response_serializer=DatabaseService__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'database.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('database.DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/CreateTable',
            DatabaseService__pb2.TableMessage.SerializeToString,
            DatabaseService__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/DeleteTable',
            DatabaseService__pb2.TableMessage.SerializeToString,
            DatabaseService__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/Create',
            DatabaseService__pb2.CreateUpdateMessage.SerializeToString,
            DatabaseService__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/Request',
            DatabaseService__pb2.RequestMessage.SerializeToString,
            DatabaseService__pb2.RequestReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/database.DatabaseService/RequestAll',
            DatabaseService__pb2.TableMessage.SerializeToString,
            DatabaseService__pb2.RequestReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/Update',
            DatabaseService__pb2.CreateUpdateMessage.SerializeToString,
            DatabaseService__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/database.DatabaseService/Delete',
            DatabaseService__pb2.RequestMessage.SerializeToString,
            DatabaseService__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
